import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class Game extends JPanel {

	// Initialize variables
	private static final double probOfTwo = 0.8;
	private static final double probOfFour = 0.2;
	private int validMoves = 0;
	private int maxNum = 0;
	private int val = 0;
	private int num = 0;
	private boolean win = false;
	private boolean lose = false;
	boolean mustAddNewPiece = false;
	// Initialize array and variables used for the pieces of the game
	private Piece[] pieces;
	// Initialize variables for graphics
	private static final Color col = new Color(0xbbada0);
	private static final String fontType = "Arial";
	private static final int sizeOfPiece = 100;
	private static final int spaceBetweenPieces = 20;

	// Class Method
	public Game() {
		setPreferredSize(new Dimension(340, 400));
		setFocusable(true);
		addKeyListener(new KeyAdapter() {
			// KeyListener Methods for key movement the user inputs
			@Override
			public void keyPressed(KeyEvent a) {
				// Set char to get KeyPressed with user input
				char keyPress = a.getKeyChar();
				// Print out the key the user pressed onto the console
				System.out.println(a);
				// if conditional to choose an action based upon user input from the keyboard
				if (keyPress == 'q') {
					quit();
				}
				// if conditional to choose an action based upon user input from the keyboard
				if (keyPress == 'r') {
					reset();
				}
				// if conditional to lose the game if no moves can occur
				if (!move()) {
					// Set boolean to false
					lose = true;
				}
				
				// if the user has not won or last, track which key press means what
				if (!win && !lose) {
					if (keyPress == 'a') {
						left();
					} else if (keyPress == 's') {
						down();
					} else if (keyPress == 'd') {
						right();
					} else if (keyPress == 'w') {
						up();
					}
					// Repaint
					repaint();
				}
				// Call reset method to reset the game
				reset();
				
				// if the user has not won, but cannot move anymore pieces, then the user has lost
				if (!win && !move()) {
					lose = true;
				}

				repaint();
			}
		});
		reset();
	}

	// Method to quit the game
	private void quit() {
		// Terminating the program using System.exit(0)
		// STACK OVERFLOW:
		// https://stackoverflow.com/questions/22452930/terminating-a-java-program
		System.exit(0);
		System.out.println("GAME HAS ENDED");
		System.out.println("Valid Moves: " + validMoves);
	}

	// Method to reset the game
	public void reset() {
		validMoves = 0;
		win = false;
		lose = false;
		// Create pieces
		pieces = new Piece[4 * 4];
		for (int i = 0; i < pieces.length; i++) {
			pieces[i] = new Piece();
		}
		// Add new pieces
		addPiece();
		addPiece();
	}

	// Method to move to the left
	public void left() {
		boolean needAddPiece = false;
		for (int i = 0; i < 4; i++) {
			Piece[] line = getLine(i);
			Piece[] merged = mergeLine(alterLine(line));
			setLine(i, merged);
			if (!needAddPiece && !compare(line, merged)) {
				needAddPiece = true;
			}
		}

		// if the game is under the condition in which a new piece is needed, add a new piece
		if (needAddPiece) {
			addPiece();
		}
	}

	// Method to move to the right
	public void right() {
		pieces = rotate(180);
		left();
		pieces = rotate(180);
	}
	
	// Method to move to up
	public void up() {
		pieces = rotate(270);
		left();
		pieces = rotate(90);
	}

	// Method to move down
	public void down() {
		pieces = rotate(90);
		left();
		pieces = rotate(270);
	}

	// Method for where to place pieces
	private Piece PieceAt(int x, int y) {
		return pieces[x + y * 4];
	}

	// Method to add pieces
	private void addPiece() {
		List<Piece> list = availableSpace();
		if (!availableSpace().isEmpty()) {
			int index = (int) (Math.random() * list.size()) % list.size();
			Piece Time = list.get(index);
			Time.value = Math.random() < 0.9 ? 2 : 4;
		}
	}

	private List<Piece> availableSpace() {
		final List<Piece> list = new ArrayList<Piece>(16);
		for (Piece t : pieces) {
			if (t.empty()) {
				list.add(t);
			}
		}
		return list;
	}

	private boolean isFull() {
		return availableSpace().size() == 0;
	}

	boolean move() {
		if (!isFull()) {
			return true;
		}
		for (int x = 0; x < 4; x++) {
			for (int y = 0; y < 4; y++) {
				Piece t = PieceAt(x, y);
				if ((x < 3 && t.value == PieceAt(x + 1, y).value) || ((y < 3) && t.value == PieceAt(x, y + 1).value)) {
					return true;
				}
			}
		}
		return false;
	}

	private boolean compare(Piece[] line1, Piece[] line2) {
		if (line1 == line2) {
			return true;
		} else if (line1.length != line2.length) {
			return false;
		}

		for (int i = 0; i < line1.length; i++) {
			if (line1[i].value != line2[i].value) {
				return false;
			}
		}
		return true;
	}

	private Piece[] rotate(int angle) {
		Piece[] newPieces = new Piece[4 * 4];
		int offsetX = 3, offsetY = 3;
		if (angle == 90) {
			offsetY = 0;
		} else if (angle == 270) {
			offsetX = 0;
		}

		double rad = Math.toRadians(angle);
		int cos = (int) Math.cos(rad);
		int sin = (int) Math.sin(rad);
		for (int x = 0; x < 4; x++) {
			for (int y = 0; y < 4; y++) {
				int newX = (x * cos) - (y * sin) + offsetX;
				int newY = (x * sin) + (y * cos) + offsetY;
				newPieces[(newX) + (newY) * 4] = PieceAt(x, y);
			}
		}
		return newPieces;
	}

	// Method to alter lines
	private Piece[] alterLine(Piece[] originalLine) {
		LinkedList<Piece> l = new LinkedList<Piece>();
		for (int i = 0; i < 4; i++) {
			if (!originalLine[i].empty())
				l.addLast(originalLine[i]);
		}
		if (l.size() == 0) {
			return originalLine;
		} else {
			Piece[] newLine = new Piece[4];
			sizeCheck(l, 4);
			for (int i = 0; i < 4; i++) {
				newLine[i] = l.removeFirst();
			}
			return newLine;
		}
	}

	private Piece[] mergeLine(Piece[] originalLine) {
		LinkedList<Piece> list = new LinkedList<Piece>();
		for (int i = 0; i < 4 && !originalLine[i].empty(); i++) {
			int num = originalLine[i].value;
			if (i < 3 && originalLine[i].value == originalLine[i + 1].value) {
				num *= 2;
				validMoves += num;
				int ourTarget = 2048;
				if (num == ourTarget) {
					win = true;
				}
				i++;
			}
			list.add(new Piece(num));
		}
		if (list.size() == 0) {
			return originalLine;
		} else {
			sizeCheck(list, 4);
			return list.toArray(new Piece[4]);
		}
	}

	private static void sizeCheck(java.util.List<Piece> y, int z) {
		while (y.size() != z) {
			y.add(new Piece());
		}
	}

	private Piece[] getLine(int index) {
		Piece[] result = new Piece[4];
		for (int i = 0; i < 4; i++) {
			result[i] = PieceAt(i, index);
		}
		return result;
	}

	private void setLine(int index, Piece[] re) {
		System.arraycopy(re, 0, pieces, index * 4, 4);
	}

	@Override
	public void paint(Graphics g) {
		super.paint(g);
		g.setColor(col);
		g.fillRect(0, 0, this.getSize().width, this.getSize().height);
		for (int y = 0; y < 4; y++) {
			for (int x = 0; x < 4; x++) {
				drawPiece(g, pieces[x + y * 4], x, y);
			}
		}
	}

	private void drawPiece(Graphics g2, Piece Piece, int x, int y) {
		Graphics2D g = ((Graphics2D) g2);
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_NORMALIZE);
		int value = Piece.value;
		int xOffset = offsetCoors(x);
		int yOffset = offsetCoors(y);
		g.setColor(Piece.getBackground());
		g.fillRoundRect(xOffset, yOffset, sizeOfPiece, sizeOfPiece, 14, 14);
		g.setColor(Piece.getForeground());
		final int size = value < 100 ? 36 : value < 1000 ? 32 : 24;
		final Font font = new Font(fontType, Font.BOLD, size);
		g.setFont(font);

		String s = String.valueOf(value);
		final FontMetrics fm = getFontMetrics(font);

		final int w = fm.stringWidth(s);
		final int h = -(int) fm.getLineMetrics(s, g).getBaselineOffsets()[2];

		if (value != 0)
			g.drawString(s, xOffset + (sizeOfPiece - w) / 2, yOffset + sizeOfPiece - (sizeOfPiece - h) / 2 - 2);

		if (win || lose) {
			g.setColor(new Color(255, 255, 255, 30));
			g.fillRect(0, 0, getWidth(), getHeight());
			g.setColor(new Color(78, 139, 202));
			g.setFont(new Font(fontType, Font.BOLD, 48));
			if (win) {
				g.drawString("WINNER", 68, 150);
			}
			if (lose) {
				g.drawString("GAME OVER", 50, 130);
				g.drawString("YOU LOST", 64, 200);
			}
			if (win || lose) {
				g.setFont(new Font(fontType, Font.PLAIN, 16));
				g.setColor(new Color(128, 128, 128, 128));
				g.drawString("Press ESC to play again", 80, getHeight() - 40);
			}
		}
		g.setFont(new Font(fontType, Font.PLAIN, 18));
		g.drawString("VALID MOVES: " + validMoves, 200, 365);

	}

	private static int offsetCoors(int arg) {
		return arg * (spaceBetweenPieces + sizeOfPiece) + spaceBetweenPieces;
	}

	static class Piece {
		int value;

		public Piece() {
			this(0);
		}

		public Piece(int num) {
			value = num;
		}

		// Test for empty spaces
		public boolean empty() {
			return value == 0;
		}

		// Set color for foreground
		public Color getForeground() {
			return value < 16 ? new Color(0x776e65) : new Color(0xf9f6f2);
		}

		// Set colors
		public Color getBackground() {
			switch (value) {
			case 2:
				return new Color(0xeee4da);
			case 4:
				return new Color(0xede0c8);
			case 8:
				return new Color(0xf2b179);
			case 16:
				return new Color(0xf59563);
			case 32:
				return new Color(0xf67c5f);
			case 64:
				return new Color(0xf65e3b);
			case 128:
				return new Color(0xedcf72);
			case 256:
				return new Color(0xedcc61);
			case 512:
				return new Color(0xedc850);
			case 1024:
				return new Color(0xedc53f);
			case 2048:
			return new Color(0xedc22e);
			}
			return new Color(0xcdc1b4);
		}
	}

	// Main method
	public static void main(String[] args) {
		// Create and set everything for the JFrame
		JFrame frame = new JFrame();
		frame.setTitle("CSC 172 PROJECT 01: 2048");
		frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		// Set frame size
		frame.setSize(500, 500);
		// Prevent screen size from being altered by the user
		frame.setResizable(false);
		// Add the game to the frame
		frame.add(new Game());
		// Set frame visible to true
		frame.setVisible(true);
	}
}

