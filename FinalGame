import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.WindowConstants;

public class FinalGame extends JPanel implements KeyListener {

	// Initialize variables
	private static final double probOfTwo = 0.8;
	private static final double probOfFour = 0.2;
	private int validMoves = 0;
	private int maxNum = 0;
	private int val = 0;
	private int num = 0;
	private boolean win = false;
	private boolean lose = false;
	boolean mustAddNewPiece = false;
	// Initialize array and variables used for the pieces of the game
	private piece[] pieces;
	// Initialize variables for graphics
	private static final Color col = new Color(0xbbada0);
	private static final String fontType = "Arial";
	private static final int sizeOfPiece = 100;
	private static final int spaceBetweenPieces = 20;

	// Class method
	public FinalGame() {
		// Set size of screen
		this.setPreferredSize(new Dimension(500, 600));
		// setFocusable(true) is necessary for the KeyListener to properly function
		setFocusable(true);
		// Add the KeyListener to the program
		addKeyListener(this);
	}

	// KeyListener Methods for key movement the user inputs
	@Override
	public void keyPressed(KeyEvent a) {
		// Set char to get KeyPressed with user input
		char keyPress = a.getKeyChar();
		// Print out the key the user pressed onto the console
		System.out.println(a);
		// if conditional to choose an action based upon user input from the keyboard
		if (keyPress == 'q') {
			quit();
		}
		// if conditional to choose an action based upon user input from the keyboard
		if (keyPress == 'r') {
			reset();
		}
		// if conditional to lose the game if no moves can occur
		if (!move()) {
			// Set boolean to false
			lose = true;
		}
		if (!win && !lose) {
			if (keyPress == 'a') {
				left();
			} else if (keyPress == 's') {
				down();
			} else if (keyPress == 'd') {
				right();
			} else if (keyPress == 'w') {
				up();
			}
			repaint();
		}
		reset();
	}

	// Method to move up
	private void up() {
		pieces = spin(270);
		left();
		pieces = spin(90);
	}

	// Method to move down
	private void down() {
		pieces = spin(90);
		left();
		pieces = spin(270);

	}

	// Method to move right
	private void right() {
		pieces = spin(180);
		left();
		pieces = spin(180);
	}

	// Method to move left and add tiles
	private void left() {
		boolean mustAddNewPiece = false;
		for (int i = 0; i < 4; i++) {
			piece[] line = getLine(i);
			piece[] merged = combineLines(alterLine(line));
			placeLine(i, merged);
			if (!mustAddNewPiece && !comparePieces(line, merged)) {
				mustAddNewPiece = true;
			}
		}
		if (mustAddNewPiece) {
			addPiece();
		}
	}

	// Method to quit the game
	private void quit() {
		// Terminating the program using System.exit(0)
		// STACK OVERFLOW:
		// https://stackoverflow.com/questions/22452930/terminating-a-java-program
		System.exit(0);
		System.out.println("You have ended the game!");
		System.out.println("Valid Moves: " + validMoves);
	}

	// Method to reset the game
	private void reset() {
		// Set validMoves to 0
		validMoves = 0;
		// Set win boolean to false
		win = false;
		// Prepare to add new tiles
		pieces = new piece[4 * 4];
		for (int i = 0; i < pieces.length; i++) {
			pieces[i] = new piece();
		}
		// add two pieces to the board
		addPiece();
		addPiece();
	}

	@Override
	public void keyReleased(KeyEvent a) {

	}

	@Override
	public void keyTyped(KeyEvent a) {

	}

	public class piece {

		// Initialize variable
		public int num;

		// Constructor
		public piece() {
			this(0);
		}

		public piece(int val) {
			num = val;
		}
	}

	// Method to move
	boolean move() {
		if (!full()) {
			return true;
		}
	}

	// Method to add a piece to the board
	private void addPiece() {
		// Use a list and if conditional to see if there is space on the board and then place a time
		List<piece> list = space();
		// If there is space, place a 2 or 4 piece
		if (!space().isEmpty()) {
			int index = (int) (Math.random() * list.size()) % list.size();
			// Get the index in the list
			piece empty = list.get(index);
			// Randomize whether or not a 2 or 4 appears
			empty.probOfTwo = 2;
			empty.probOfFour = 4;
		}

	// Method to determine whether or not a piece is empty
	public boolean empty() {
		return num == 0;
	}

	// Determine location of where a piece will appear
	private piece placePiece(int x, int y) {
		return pieces[x + y * 4];
	}

	// Determine if there is space
	private List<piece> space() {
		final List<piece> pieceList = new ArrayList<piece>(16);
		for (piece p : pieces) {
			if (p.isEmpty()) {
				// add piece
				pieceList.add(p);
			}
		}
		return pieceList;
	}

	// Method to return whether or not there is space
	private boolean full() {
		return space().size() == 0;
	}

	// Method to see if any pieces can move
	boolean canMove() {
		if (!full()) {
			return true;
		}

		// For loop for placing pieces
		for (int x = 0; x < 4; x++) {
			for (int y = 0; y < 4; y++) {
				piece p = placePiece(x, y);
				if ((x < 3 && p.val == placePiece(x + 1, y).val) || ((y < 3) && p.val == placePiece(x, y + 1).val)) {
					return true;
				}
			}
		}
		return false;
	}

	// Compare each piece
	private boolean comparePieces(piece[] lineOne, piece[] lineTwo) {
		if (lineOne == lineTwo) {
			return true;
		}
	}else if(lineOne.length!=lineTwo.length)

	{
		return false;
	}

	for(
	int i = 0;i<lineOne.length;i++)
	{
		if (lineOne[i].value != lineTwo[i].value) {
			return false;
		}
		return true;
	}

	// Method to control the movement of each piece
	private piece[] spin(int ang) {
		piece[] newTiles = new piece[4 * 4];
		int setX = 3, setY = 3;
		if (ang == 90) {
			setY = 0;
		} else if (ang == 270) {
			setX = 0;
		}

		double rad = Math.toRadians(ang);
		int cos = (int) Math.cos(rad);
		int sin = (int) Math.sin(rad);
		for (int x = 0; x < 4; x++) {
			for (int y = 0; y < 4; y++) {
				int newX = (x * cos) - (y * sin) + setX;
				int newY = (x * sin) + (y * cos) + setY;
				newTiles[(newX) + (newY) * 4] = placePiece(x, y);
			}
		}
		return newTiles;
	}

	// Method to alter the line
	private piece[] alterLine(piece[] originalLine) {
		LinkedList<piece> l = new LinkedList<piece>();
		for (int i = 0; i < 4; i++) {
			if (!originalLine[i].empty())
				l.addLast(originalLine[i]);
		}
		if (l.size() == 0) {
			return originalLine;
		} else {
			piece[] newLine = new piece[4];
			makeSureSize(l, 4);
			for (int i = 0; i < 4; i++) {
				newLine[i] = l.removeFirst();
			}
			return newLine;
		}
	}

	// Method to combine the lines
	private piece[] combineLines(piece[] originalLine) {
		LinkedList<piece> list = new LinkedList<piece>();
		for (int i = 0; i < 4 && !originalLine[i].empty(); i++) {
			int num = originalLine[i].val;
			if (i < 3 && originalLine[i].val == originalLine[i + 1].val) {
				validMoves += 1;
				int goal = 2048;
				if (num == goal) {
					win = true;
				}
				i++;
			}
			list.add(new piece(num));
		}
		if (list.size() == 0) {
			return originalLine;
		} else {
			makeSureSize(list, 4);
			return list.toArray(new piece[4]);
		}
	}

	// Method to check the size of the list
	private static void makeSureSize(java.util.List<piece> l, int s) {
		while (l.size() != s) {
			l.add(new piece());
		}
	}

	// Method to get the line placement
	private piece[] getLine(int index) {
		piece[] result = new piece[4];
		for (int i = 0; i < 4; i++) {
			result[i] = placePiece(i, index);
		}
		return result;
	}

	// Method to place the line
	private void placeLine(int index, piece[] a) {
		// Copy of array
		System.arraycopy(a, 0, pieces, index * 4, 4);
	}

	// PaintComponent for drawing the tiles
	@Override
	public void paint(Graphics g) {
		super.paint(g);
		g.setColor(col);
		g.fillRect(0, 0, this.getSize().width, this.getSize().height);
		for (int y = 0; y < 4; y++) {
			for (int x = 0; x < 4; x++) {
				drawPiece(g, pieces[x + y * 4], x, y);
			}
		}
	}

	// Method to draw each piece
	private void drawPiece(Graphics g2, piece p, int x, int y) {
		Graphics2D g = ((Graphics2D) g2);
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_NORMALIZE);
		int val = piece.val;
		int xOffset = offsetCoors(x);
		int yOffset = offsetCoors(y);
		g.setColor(piece.getBackground());
		g.fillRoundRect(xOffset, yOffset, sizeOfPiece, sizeOfPiece, 14, 14);
		g.setColor(piece.getForeground());
		final int size = val < 100 ? 36 : val < 1000 ? 32 : 24;
		final Font font = new Font(fontType, Font.BOLD, size);
		g.setFont(font);

		String s = String.valueOf(val);
		final FontMetrics fm = getFontMetrics(font);

		final int w = fm.stringWidth(s);
		final int h = -(int) fm.getLineMetrics(s, g).getBaselineOffsets()[2];

		if (val != 0)
			g.drawString(s, xOffset + (sizeOfPiece - w) / 2, yOffset + sizeOfPiece - (sizeOfPiece - h) / 2 - 2);

		if (win || lose) {
			g.setColor(new Color(255, 255, 255, 30));
			g.fillRect(0, 0, getWidth(), getHeight());
			g.setColor(new Color(78, 139, 202));
			g.setFont(new Font(fontType, Font.BOLD, 48));
			if (win) {
				g.drawString("You won!", 68, 150);
			}
			if (lose) {
				g.drawString("Game over!", 50, 130);
				g.drawString("You lose!", 64, 200);
			}
			if (win || lose) {
				g.setFont(new Font(fontType, Font.PLAIN, 16));
				g.setColor(new Color(128, 128, 128, 128));
				g.drawString("Press ESC to play again", 80, getHeight() - 40);
			}
		}
		g.setFont(new Font(fontType, Font.PLAIN, 18));
		g.drawString("Score: " + validMoves, 200, 365);

	}

	private static int offsetCoors(int arg) {
		return arg * (sizeOfPiece + sizeOfPiece) + spaceBetweenPieces;
	}

	public Color getForeground() {
		return val < 16 ? new Color(0x776e65) : new Color(0xf9f6f2);
	}

	public Color getBackground() {
		switch (val) {
		case 2:
			return new Color(0xeee4da);
		case 4:
			return new Color(0xede0c8);
		case 8:
			return new Color(0xf2b179);
		case 16:
			return new Color(0xf59563);
		case 32:
			return new Color(0xf67c5f);
		case 64:
			return new Color(0xf65e3b);
		case 128:
			return new Color(0xedcf72);
		case 256:
			return new Color(0xedcc61);
		case 512:
			return new Color(0xedc850);
		case 1024:
			return new Color(0xedc53f);
		case 2048:
			return new Color(0xedc22e);
		}
		return new Color(0xcdc1b4);
	}

	// Main method
	public static void main(String[] args) {
		// Create and set everything for the JFrame
		JFrame frame = new JFrame();
		frame.setTitle("CSC 172 PROJECT 01: 2048");
		frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		// Set frame size
		frame.setSize(500, 600);
		// Prevent screen size from being altered by the user
		frame.setResizable(false);
		// Add the game to the frame
		frame.add(new FinalGame());
		// Set frame visible to true
		frame.setVisible(true);
	}

